
\documentclass[english,draft]{article}

%% ---------------------------------
%% | Information about the thesis  |
%% ---------------------------------

%% Name of the author
\author{Sergey Hayrapetyan}

%% Title (and possibly subtitle) of the thesis
\title{Hub Labels}



%% Change the institute here, ``IPD'' is default
% \myinstitute{Institute for \dots}

%% You can put a logo in the ``logos'' directory and include it here
%% instead of the SDQ logo
% \grouplogo{myfile}
%% Alternatively, you can disable the group logo
% \nogrouplogo

%% The reviewers are the professors that grade your thesis




%% --------------------------------
%% | Settings for word separation |
%% --------------------------------

%% Describe separation hints here.
%% For more details, see 
%% http://en.wikibooks.org/wiki/LaTeX/Text_Formatting#Hyphenation
\hyphenation{
% me-ta-mo-del
}

%% --------------------------------
%% | Bibliography                 |
%% --------------------------------

%% Use biber instead of BibTeX, see README
\usepackage[citestyle=numeric,style=numeric,backend=biber]{biblatex}
\addbibresource{thesis.bib}

%% ====================================
%% ====================================
%% ||                                ||
%% || Beginning of the main document ||
%% ||                                ||
%% ====================================
%% ====================================
\begin{document}



%% Set the title
\maketitle



\include{sections/declaration}

\setcounter{page}{1}
\pagenumbering{roman}

%% ----------------
%% |   Abstract   |
%% ----------------

%% For theses written in English, an abstract both in English
%% and German is mandatory.
%%
%% For theses written in German, a German abstract is sufficient.
%%
%% The text is included from the following files:
%% - sections/abstract
\begin{abstract}



Point to point distance computation is a fundamental problem in a graph theory.
Dijkstra’s algorithm solves this problem in near linear time.
But it observes insignificant nodes to get the correct answer.
An alternative solution for point to point shortest path distance computation is using Hub-Labels.
Main idea is to save for each node of the graph important nodes for itself and process very fast shortest path queries in the graph.
The label for each node contains hubs with its distance from and to the node.
It has excellent query performance, which makes the ability to calculate the distance between 2 nodes in the graph in very small time.
The major disadvantage is the storage – expenses, as it requires to save Labels for each node of the graph.
\end{abstract}

\section{Introduction}



Hub labeling (HL) is a powerful technique to calculate the distance between two points of the graph with an excellent performance in time.
Hub labels gives the advantage to observe only most important nodes of the graph during the query between the source and the target nodes.
At first we need to calculate the most important nodes for each node of the graph and save it’s distance from and to the nodes with its ID.
That means that each nodes of the graph has two Labels: forward and backward labels.

Forward label contains important nodes with distance from the node and to its ID, i.e.  ${L}_{f}$(v) forward label of node v has elements \{(${ID}_{1}$, distance(v, ${ID}_{1}$) ), … (${ID}_{n}$, distance(v, ${ID}_{n}$))\}.
The same is for backward label in contrast to the distances, where the saved distance in label is from the hub to the node ( ${ID}_{n}$, distance( ${ID}_{n}$, v)). 
After preprocessing the graph and calculating labels for each node of the graph, we are able to make fast queries to find distance between random 2 nodes of the graph.

To calculate the distance between s and t nodes, the algorithm uses only forward labels of s and backward labels of t. 

It is preferable to have hubs sorted in labels by its ids for faster queries.
A very important condition is that for all nodes of the graph, there should be at least one common node, which covers the shortest path ${P}_{st}$ . This is called Cover Property. 

\begin{center}
			$\forall$ s-t shortest paths 
			$\exists$ v $\in$ ${L}_{f}$(s) $\cap$ ${L}_{b}$(t) 
			  s.t. dist(s,v) + dist(v,t) = $min {P}_{st}$;
\end{center}
The size of the label is the number of hubs. 
The label size should be as small as possilble to save memory space and process faster queries. 
That means that the algorithm which generates labels should not only satisfy the cover property but also it should generate labels with small sizes.
In the first section is described about hub labels and its advantages. 
In the second section we will talk about hierarchical and canonical labels. 
Afterwards in the next section is described the way of label generation, included queries and label pruning by calculating the canonical labels. 
In last 2 Chapters it will be explained how to change IDs of hubs which are appearing frequently in labels to compress it and save space.
The last section is about results, label sizes and query time.


%% ------------------------
%% |   Table of Contents  |
%% ------------------------
\tableofcontents

\listoffigures
\listoftables

%% -----------------
%% |   Main part   |
%% -----------------


\include{sections/introduction}
\include{sections/content}
\include{sections/evaluation}
\include{sections/conclusion}


%% --------------------
%% |   Bibliography   |
%% --------------------

%% Add entry to the table of contents for the bibliography
\printbibliography[heading=bibintoc]


%% ----------------
%% |   Appendix   |
%% ----------------
\appendix
\include{sections/appendix}

\end{document}
